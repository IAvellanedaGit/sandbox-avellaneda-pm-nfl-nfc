// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class ListTeamsResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ListTeamsResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsListTeamsResponse(bb:flatbuffers.ByteBuffer, obj?:ListTeamsResponse):ListTeamsResponse {
  return (obj || new ListTeamsResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsListTeamsResponse(bb:flatbuffers.ByteBuffer, obj?:ListTeamsResponse):ListTeamsResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ListTeamsResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

teams(index: number):string
teams(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
teams(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

teamsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

error():string|null
error(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
error(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startListTeamsResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTeams(builder:flatbuffers.Builder, teamsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, teamsOffset, 0);
}

static createTeamsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTeamsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addError(builder:flatbuffers.Builder, errorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, errorOffset, 0);
}

static endListTeamsResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createListTeamsResponse(builder:flatbuffers.Builder, teamsOffset:flatbuffers.Offset, errorOffset:flatbuffers.Offset):flatbuffers.Offset {
  ListTeamsResponse.startListTeamsResponse(builder);
  ListTeamsResponse.addTeams(builder, teamsOffset);
  ListTeamsResponse.addError(builder, errorOffset);
  return ListTeamsResponse.endListTeamsResponse(builder);
}
}
